from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import logging

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ—Ä–æ–¥–∞—Ö
BREEDS_FILE = 'breeds.txt'

# –í–æ–ø—Ä–æ—Å—ã (12 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
QUESTIONS = [
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å:", "key": "aggressiveness"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:", "key": "activity"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –ª–µ–≥–∫–æ—Å—Ç—å –¥—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∏:", "key": "trainability"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ª–∏–Ω—å–∫–∏:", "key": "shedding"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—É—é –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —É—Ö–æ–¥–µ:", "key": "grooming"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å:", "key": "friendliness"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º:", "key": "health"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:", "key": "cost"},
    {"text": "–ö–∞–∫ –¥–æ–ª–≥–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ?", "key": "alone_tolerance"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞:", "key": "intelligence"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞:", "key": "noise"},
    {"text": "–û—Ü–µ–Ω–∏—Ç–µ –≤–∞–∂–Ω–æ—Å—Ç—å –æ—Ö—Ä–∞–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤:", "key": "guarding"}
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ü–µ–Ω–æ–∫
OPTIONS = ['1', '2', '3', '4', '5']

user_data = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞
def load_breeds():
    try:
        with open(BREEDS_FILE, 'r', encoding='utf-8') as f:
            lines = [line.strip() for line in f.readlines() if line.strip()]
    except FileNotFoundError:
        raise Exception(f"–§–∞–π–ª {BREEDS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    breeds = []
    index = 0
    while index + 28 < len(lines):
        try:
            breed = {
                "name": lines[index + 0],
                "country": lines[index + 1],
                "weight": lines[index + 2],
                "height": lines[index + 3],
                "lifespan": lines[index + 4],
                "aggressiveness_text": lines[index + 5],
                "aggressiveness": int(lines[index + 6]),
                "activity_text": lines[index + 7],
                "activity": int(lines[index + 8]),
                "trainability_text": lines[index + 9],
                "trainability": int(lines[index + 10]),
                "shedding_text": lines[index + 11],
                "shedding": int(lines[index + 12]),
                "grooming_text": lines[index + 13],
                "grooming": int(lines[index + 14]),
                "friendliness_text": lines[index + 15],
                "friendliness": int(lines[index + 16]),
                "health_text": lines[index + 17],
                "health": int(lines[index + 18]),
                "cost_text": lines[index + 19],
                "cost": int(lines[index + 20]),
                "alone_tolerance_text": lines[index + 21],
                "alone_tolerance": int(lines[index + 22]),
                "intelligence_text": lines[index + 23],
                "intelligence": int(lines[index + 24]),
                "noise_text": lines[index + 25],
                "noise": int(lines[index + 26]),
                "guarding_text": lines[index + 27],
                "guarding": int(lines[index + 28]),
            }
            breeds.append(breed)
            index += 29
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ—Ä–æ–¥—ã, –Ω–∞—á–∏–Ω–∞—è —Å {lines[index] if index < len(lines) else '–∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞'}: {e}")
            index += 1
    return breeds

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n"
        "–Ø ‚Äî *–°–æ–±–∞—á–∏–π –ü–æ–¥–±–æ—Ä—â–∏–∫* üê∂‚ú®\n"
        "–ü–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –ø–æ—Ä–æ–¥—É —Å–æ–±–∞–∫–∏ –ø–æ–¥ —Ç–≤–æ–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.\n\n"
        "–ü—Ä–æ–π–¥–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –∏–∑ 12 –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!\n\n"
        "–ì–æ—Ç–æ–≤? –ù–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ"
    )

    # –Ω–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
    keyboard = [[InlineKeyboardButton("üêæ –ù–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –ø–æ—Ä–æ–¥—ã", callback_data="start_quiz")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id] = {"answers": {}, "current_question": 0}

# —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
async def ask_question(update_or_query, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    question_index = user_data[user_id]["current_question"]

    if question_index >= len(QUESTIONS):
        await process_results(update_or_query, context)
        return

    question = QUESTIONS[question_index]
    keyboard = [
        [InlineKeyboardButton(f"{opt}/5", callback_data=f"{question['key']}|{opt}")]
        for opt in OPTIONS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # chat_id
    if isinstance(update_or_query, Update):
        chat_id = update_or_query.effective_chat.id
    else:
        chat_id = update_or_query.message.chat_id

    await context.bot.send_message(
        chat_id=chat_id,
        text=question["text"],
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in user_data:
        await query.message.reply_text("–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"
    if data == "start_quiz":
        try:
            await query.edit_message_reply_markup(reply_markup=None)
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
        await ask_question(query, context, user_id)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if '|' not in data:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    key, value_str = data.split('|', 1)

    if value_str not in OPTIONS:
        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    user_data[user_id]["answers"][key] = int(value_str)

    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    user_data[user_id]["current_question"] += 1
    await ask_question(query, context, user_id)

# –ü–æ–∏—Å–∫ –ª—É—á—à–µ–π –ø–æ—Ä–æ–¥—ã –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def process_results(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –∏ chat_id
    if isinstance(update_or_query, Update):
        user_id = update_or_query.effective_user.id
        chat_id = update_or_query.effective_chat.id
    else:
        user_id = update_or_query.from_user.id
        chat_id = update_or_query.message.chat_id

    if user_id not in user_data:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        return

    user_answers = user_data[user_id]["answers"]

    try:
        breeds = load_breeds()
    except Exception as e:
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}"
        )
        return

    best_breed = None
    min_diff = float('inf')

    for breed in breeds:
        total_diff = 0
        for param in ["aggressiveness", "activity", "trainability", "shedding", "grooming",
                      "friendliness", "health", "cost", "alone_tolerance", "intelligence", "noise", "guarding"]:
            user_val = user_answers.get(param, 3)
            breed_val = breed.get(param, 3)
            total_diff += abs(user_val - breed_val)

        if total_diff < min_diff:
            min_diff = total_diff
            best_breed = breed

    if best_breed:
        result = (
            f"üêæ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–æ—Ä–æ–¥–∞: {best_breed['name']}*\n\n"
            f"üåç *–°—Ç—Ä–∞–Ω–∞:* {best_breed['country']}\n"
            f"‚öñÔ∏è *–í–µ—Å:* {best_breed['weight']}\n"
            f"üìè *–†–æ—Å—Ç:* {best_breed['height']}\n"
            f"‚è≥ *–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∂–∏–∑–Ω–∏:* {best_breed['lifespan']}\n\n"
            f"üî• *–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å:* {best_breed['aggressiveness_text']} ({best_breed['aggressiveness']}/5)\n"
            f"‚ö° *–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {best_breed['activity_text']} ({best_breed['activity']}/5)\n"
            f"üéì *–î—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞:* {best_breed['trainability_text']} ({best_breed['trainability']}/5)\n"
            f"üçÇ *–õ–∏–Ω—å–∫–∞:* {best_breed['shedding_text']} ({best_breed['shedding']}/5)\n"
            f"üõÅ *–£—Ö–æ–¥:* {best_breed['grooming_text']} ({best_breed['grooming']}/5)\n"
            f"‚ù§Ô∏è *–î—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç—å:* {best_breed['friendliness_text']} ({best_breed['friendliness']}/5)\n"
            f"üè• *–ó–¥–æ—Ä–æ–≤—å–µ:* {best_breed['health_text']} ({best_breed['health']}/5)\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* {best_breed['cost_text']} ({best_breed['cost']}/5)\n"
            f"üïí *–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ:* {best_breed['alone_tolerance_text']} ({best_breed['alone_tolerance']}/5)\n"
            f"üß† *–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç:* {best_breed['intelligence_text']} ({best_breed['intelligence']}/5)\n"
            f"üîä *–®—É–º:* {best_breed['noise_text']} ({best_breed['noise']}/5)\n"
            f"üõ°Ô∏è *–û—Ö—Ä–∞–Ω–∞:* {best_breed['guarding_text']} ({best_breed['guarding']}/5)\n\n"
            f"‚úÖ *–ù–∞–∏–ª—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ!*"
        )
        await context.bot.send_message(
            chat_id=chat_id,
            text=result,
            parse_mode='Markdown'
        )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –ø–æ—Ä–æ–¥—É."
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TOKEN = "*"  # !–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!

    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    application.run_polling()

if __name__ == "__main__":
    main()
